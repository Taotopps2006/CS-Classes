RushHour

Goal: Find combination of moves to get car 0 to edge of board

Structs:
Car
	- int x
	- int y
	- char orientation
	- int length
Board
	- int numberOfCars
	- int numRows
	- int numCols
	- Car[] listOfCars
	- char[][] board
Variables:
	static Board board;

Algorithm:
Main
	Get the board
	Store the board in boardQueue
	while(!boardQueue.isEmpty())
		Check if board is solved
			break loop
		currentBoard = stringToBoard(boardQueue.dequeue())
		for(i = 0; i < numCars; i++)
			if( moveForward(i) )
				boardQueue.enqueue( currentBoard.toString() )
				dejaVu.add( currentBoard.toString() )
				moveBackward(i)
			if( moveBackward(i) )
				boardQueue.enqueue( currentBoard.toString() )
				dejaVu.add( currentBoard.toString() )
				moveForward(i)
Build Board
	for(i = 0; i < board.numRows; i++)
		for(j = 0; j < board.numCols; j++)
			board.board[i][j] = '.';
	cin >> board.numberOfCars
	board.listOfCars = new cars[board.numberOfCars];
	Car temp;
	for(int i = 0; i < board.numberOfCars; i++)
		cin >> temp.length
		cin >> temp.orientation
		cin >> temp.x
		cin >> temp.y
		board.listOfCars[i] = temp
		board.board[temp.x][temp.y] = i
		if(temp.orientation == 'H')
			board.board[temp.x][temp.y+1] = i;
			if(temp.length == 3)
				board[temp.x][temp.y+2] = i;
		if(temp.orientation == 'V')
			board.board[temp.x+1][temp.y] = i;
			if(temp.length == 3)
				board[temp.x+2][temp.y] = i;
Check if Solved
	return (board.listOfCars[0].y + 1 == 5)
Move Forward( int carNum )
	switch(car[carNum].carOrientation)
		case 0: // Horizontal
			check if car can move forward on the board
				check if spot in front of the car is empty (ie, no other cars in that spot)
					move car forward
					return true
			break
		case 1: // Vertical
			check if car can move forward on the board
				check if spot in front of the car is empty (ie, no other cars in that spot)
					move car forward
					return true
			break
		default:
			cout << "We shouldn't be here" << endl
	return false
Move Backward( int carNum )
	switch(car[carNum].carOrientation)
		case 0: // Horizontal
			check if car can move Backward on the board
				check if spot behind the car is empty (ie, no other cars in that spot)
					move car Backward
					return true
			break
		case 1: // Vertical
			check if car can move Backward on the board
				check if spot behind the car is empty (ie, no other cars in that spot)
					move car Backward
					return true
			break
		default:
			cout << "We shouldn't be here" << endl
	return false